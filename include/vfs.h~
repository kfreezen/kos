#ifndef VFS_H
#define VFS_H

#include <KOSTypes.h>
#include <device.h>
#include <kheap.h>
#include <print.h>

#define FS_FILE        0x01
#define FS_DIRECTORY   0x02
#define FS_CHARDEVICE  0x03
#define FS_BLOCKDEVICE 0x04
#define FS_PIPE        0x05
#define FS_SYMLINK     0x06
#define FS_MOUNTPOINT  0x08 // Is the file an active mountpoint?
#define FS_ROOT_DIR    0x12
#define FS_VIRTUAL     0x1000

#define FS_NAME_LEN 128
struct dirent {
	char name[128];
	UInt32 ino;
};

struct fs_node;

typedef UInt32 (*read_type_t)(struct fs_node*,UInt32,UInt32,UInt8*);
typedef UInt32 (*write_type_t)(struct fs_node*,UInt32,UInt32,UInt8*);
typedef void (*open_type_t)(struct fs_node*);
typedef void (*close_type_t)(struct fs_node*);
typedef struct dirent * (*readdir_type_t)(struct fs_node*,UInt32);
typedef struct fs_node * (*finddir_type_t)(struct fs_node*,const char *name);

typedef struct fs_node
{
   char* name;//[FS_NAME_LEN];
   UInt32 mask;
   UInt32 uid;
   UInt32 gid;
   UInt32 flags;
   UInt32 inode;
   UInt32 length;
   UInt32 impl;
   read_type_t read;
   write_type_t write;
   open_type_t open;
   close_type_t close;
   readdir_type_t readdir;
   finddir_type_t finddir;
   struct fs_node *ptr;
} fs_node_t;

extern fs_node_t *fs_root; // The root of the filesystem.

typedef struct FSDriver FSDriver;

typedef struct {
	void* mountData;
	FSDriver* linkedDriver;
} Mount;

typedef fs_node_t* (*CreateMount)(Device*);

struct FSDriver {
	CreateMount createMount;
};

typedef struct dirent VFS_DirEntry;

// Standard read/write/open/close functions. Note that these are all suffixed with
// _fs to distinguish them from the read/write/open/close which deal with file descriptors
// not file nodes.

// TODO Come up with better names for readdir_fs and finddir_fs and in the meantime understand the VFS system better.
UInt32 read_fs(fs_node_t *node, UInt32 offset, UInt32 size, UInt8 *buffer);
UInt32 write_fs(fs_node_t *node, UInt32 offset, UInt32 size, UInt8 *buffer);
void open_fs(fs_node_t *node);
void close_fs(fs_node_t *node);

struct dirent *readdir_fs(fs_node_t *node, UInt8 index);

/* finddir_fs takes a node and searches for a file in it. **/
fs_node_t *finddir_fs(fs_node_t *node, char *name); 

fs_node_t* open_file(fs_node_t* root, const char* file);
fs_node_t* open_file_fs(fs_node_t* root, const char* file);

void mount(Device* device, FSDriver* driver, const char* mountpoint);

void VFS_Init();
#endif
